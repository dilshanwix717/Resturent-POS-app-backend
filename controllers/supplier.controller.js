/** 
 * Description: Controller for Shops.
 * Created by: S.A.N.M.Wijethunga
 * Role: CeylonX Backend Developer(Intern)
 * ContactEmail: sanmwijethunga.support@gmail.com
 * Created on: 2024 July 18
 * Last edited on: 2024 July 18
*/
import Supplier from "../models/supplier.model.js";
import { io } from '../server.js'; // For real-time updates with socket.io
import { createLogEntry } from "../utils/logger.util.js";

// Create new supplier document
export const createSupplier = async (req, res, next) => {
    if (req.role !== 'superAdmin') {
        return res.status(403).json({ message: "Only Super Admins are allowed to create suppliers." });
        
    } else {
        const newSupplier = new Supplier({
            // Not using ...re.body for security, clarity, and to avoid unwanted fields
            //...req.body,
            // To know about the data that is being sent in the request body, refer to the models/supplier.model.js file
            supplierId: "SupplierID-1", // This will be auto-generated by the pre-save hook
            supplierName: req.body.supplierName,
            creditPeriod: req.body.creditPeriod,
            details: req.body.details,
            address: req.body.address,
            contactNo: req.body.contactNo,
            email: req.body.email,
            companyId: req.body.companyId,
            createdBy: req.userId,
            toggle: 'disable',
            shopIds: req.body.shopIds,
        });
    
        try {
            const savedSupplier = await newSupplier.save();
            io.emit('supplierCreated', savedSupplier);
            createLogEntry(req.body.companyId, req.userId, 'Supplier Created:', savedSupplier.supplierId);
            res.status(201).send(savedSupplier);
        } catch (err) {
            next(err);
        }
    }
}

// Get all suppliers. filter the toggle data from frontend.
export const getSuppliers = async (req, res, next) => {
    try {
        const suppliers = await Supplier.find({});
        res.json(suppliers);
    } catch (err) {
        res.status(500).json({ message: err.message });
    }
};

// Get supplier by supplier ID
export const getSupplierById = async (req, res, next) => {
    try {
        const supplier = await Supplier.findOne({ supplierId: req.params.supplierId });
        if (!supplier) {
            return res.status(404).json({ message: "Supplier not found." });
        }
        res.status(200).json(supplier);
    }
    catch (err) {
        console.error(err);
        next(err);
    }
};

// Update supplier by supplier ID
export const updateSupplier = async (req, res, next) => {
    if (req.role !== 'superAdmin') {
        return res.status(403).json({ message: "Only Super Admins are allowed to update suppliers." });
    }

    const allowedFields = ['supplierName', 'details', 'address', 'contactNo', 'email', 'creditPeriod', 'companyId', 'toggle', 'shopIds'];
    const update = {};

    allowedFields.forEach(field => {
        if (req.body[field] !== undefined) {
            update[field] = req.body[field];
        }
    });

    try {
        const updatedSupplier = await Supplier.findOneAndUpdate({ supplierId: req.params.supplierId }, update, { new: true });
        if (!updatedSupplier) {
            return res.status(404).json({ message: "Supplier not found." });
        }

        io.emit('supplierUpdated', updatedSupplier);
        createLogEntry(req.body.companyId, req.userId, 'Supplier Updated:', updatedSupplier.supplierId);
        res.status(200).json(updatedSupplier);
    } catch (err) {
        console.error(err);
        next(err);
    }
};

// Enable supplier by supplier ID (Update the toggle field to enable)
export const enableSupplier = async (req, res, next) => {
    if (req.role !== 'superAdmin') {
        return res.status(403).json({ message: "Only Super Admins are allowed to enable suppliers." });
    }
    try {
        const updatedSupplier = await Supplier.findOneAndUpdate({ supplierId: req.params.supplierId }, { toggle: "enable" }, { new: true });
        if (!updatedSupplier) {
            return res.status(404).json({ message: "Supplier not found." });
        }
        console.log("SupplierID:", updatedSupplier.supplierId, "is enabled.");
        io.emit('supplierEnabled', updatedSupplier);
        createLogEntry(updatedSupplier.companyId, req.userId, 'Supplier Enabled:', updatedSupplier.supplierId);
        res.status(200).json(updatedSupplier);
    } catch (err) {
        console.error(err);
        next(err);
    }
};

// Remove supplier by supplier ID (Update the toggle field to disable)
export const removeSupplier = async (req, res, next) => {
    if (req.role !== 'superAdmin') {
        return res.status(403).json({ message: "Only Super Admins are allowed to remove suppliers." });
    }
    try {
        const updatedSupplier = await Supplier.findOneAndUpdate({ supplierId: req.params.supplierId }, { toggle: "disable" }, { new: true });
        if (!updatedSupplier) {
            return res.status(404).json({ message: "Supplier not found." });
        }
        console.log("SupplierID:", updatedSupplier.supplierId, "is removed/Disabled.");
        io.emit('supplierRemoved', updatedSupplier);
        createLogEntry(updatedSupplier.companyId, req.userId, 'Supplier Deleted/Removed:', updatedSupplier.supplierId);
        res.status(200).json(updatedSupplier);
    } catch (err) {
        console.error(err);
        next(err);
    }
};