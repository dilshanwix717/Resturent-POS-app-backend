/** 
 * Description: Controller for Shops.
 * Created by: S.A.N.M.Wijethunga
 * Role: CeylonX Backend Developer(Intern)
 * ContactEmail: sanmwijethunga.support@gmail.com
 * Created on: 2024 July 26
 * Last edited on: 2024 July 26
*/
import Theme from "../models/theme.model.js";
import { io } from '../server.js'; // For real-time updates with socket.io
import { createLogEntry } from "../utils/logger.util.js";

// Create new theme document
export const createTheme = async (req, res, next) => {
    if (req.role !== 'superAdmin') {
        return res.status(403).json({ message: "Only Super Admins are allowed to create themes." });
        
    } else {
        const newTheme = new Theme({
            // Not using ...re.body for security, clarity, and to avoid unwanted fields
            //...req.body,
            // To know about the data that is being sent in the request body, refer to the models/theme.model.js file
            themeId: 'ThemeId-1', // This will be auto-generated by the pre-save hook
            companyID: req.body.companyId, // Select the company that the theme belongs to
            primaryColor: req.body.primaryColor,
            secondaryColor: req.body.secondaryColor,
            fontColor: req.body.fontColor,
            //logoPath: req.body.logoPath, // To enable this, we need cloud storage like google drive to be set up.
            createdBy: req.userId,
        });
    
        try {
            // Save the new theme document to the database
            const savedTheme = await newTheme.save();
            // Emit a socket.io event to notify the frontend about the new theme creation
            io.emit('themeCreated', savedTheme);
            // Log the theme creation event
            createLogEntry(req.body.companyId, req.userId, 'Theme Created:' + savedTheme.themeId);
            // Send the saved theme document as the response
            res.status(201).send(savedTheme);
        }
        catch (err) {
            next(err);
        }
    }
}

// Get all themes
export const getThemes = async (req, res, next) => {
    try {
        const themes = await Theme.find({});
        res.json(themes);
    } catch (err) {
        res.status(500).json({ message: err.message });
    }
};

// Get theme by theme ID
export const getTheme = async (req, res, next) => {
    try {
        const theme = await Theme.findOne({themeId: req.params.themeId});
        res.json(theme);
    } catch (err) {
        res.status(500).json({ message: err.message });
    }
};

// Update theme by theme ID
export const updateTheme = async (req, res, next) => {
    try {
        const updatedTheme = await Theme.findOneAndUpdate({themeId: req.params.themeId}, req.body, {new: true});
        io.emit('themeUpdated', updatedTheme);
        createLogEntry(req.body.companyId, req.userId, 'Theme Updated:' + updatedTheme.themeId);
        res.json(updatedTheme);
    }
    catch (err) {
        next(err);
    }
}

// Delete theme by theme ID
export const deleteTheme = async (req, res, next) => {
    try {
        const deletedTheme = await Theme.findOneAndDelete({themeId: req.params.themeId});
        io.emit('themeDeleted', deletedTheme);
        createLogEntry(req.companyId, req.userId, 'Theme Deleted:' + deletedTheme.themeId);
        res.json(deletedTheme);
    } 
    catch (err) {
        next(err);
    }
}