import mongoose from "mongoose";
const { Schema } = mongoose;

const Payment_TransactionSchema = new Schema({
    // Transaction ID per transaction generated by the system
    // PTID: Payment Transaction ID
    paymentID: {
        type: String,
        required: true,
        unique: true,
    },
    // Company ID where the transaction is generated (Cashier logged in companyId)
    companyId: {
        type: String,
        required: true,
    },
    // Shop ID where the transaction is generated (Cashier logged in shopId)
    shopId: {
        type: String,
        required: true,
    },
    // Transaction Date and Time
    transactionDateTime: {
        type: Date,
        required: true,
    },

    // Order Number of the transaction Daily resets back to 1 at the end of the day generated by frontend POS and sent here. 
    // this is unique for according to the day and shopID.
    // this inovoiceID is same as the orderNo in the finished good transaction model.
    invoiceID: {
        type: String,
        required: true,
    },

    // Transaction Type (GRN, Sales, Return, etc.)
    transactionType: {
        type: String,
        required: true,
    },
    // Transaction Code generated by the system for all the transactions in the transaction model.
    transactionCode: {
        type: String,
        required: true,
    },
    // Bill Total of the transaction order
    billTotal: {
        type: Number,
        required: true,
        min: 0,
    },
    // how much paid with cash amount
    cashAmount: {
        type: Number,
        required: false,
        min: 0,
    },
    // how much paid with card amount
    cardAmount: {
        type: Number,
        required: false,
        min: 0,
    },
    // Invoice Number
    invoiceNumber: {
        type: String,
        required: false,
        match: /^[0-9]{1,25}$/,
    },
    // how much left credits need to be added to wallet. for like daily customers.
    walletIn: {
        type: Number,
        required: false,
        min: 0,
    },
    // how much paid with wallet amount
    walletOut: {
        type: Number,
        required: false,
        min: 0,
    },
    // Any other payment methods and how much paid with that method
    otherPayment: {
        type: Number,
        required: false,
        min: 0,
    },
    // Loyalty Points earned or used in the transaction
    loyaltyPoints: {
        type: Number,
        required: false,
        min: 0,
    },
    // Transaction In or Out (In - Payment, Out - Refund)
    transactionInOut: {
        type: String,
        required: true,
        enum: ["In", "Out"],
    },
    // Transaction Status (Pending, Completed, Cancelled)
    transactionStatus: {
        type: String,
        required: true,
        enum: ["Pending", "Completed", "Cancelled", "Returned", "Partially Returned"],
    },
    // Customer ID of the customer involved in the transaction
    customerId: {
        type: String,
        required: false,
    },
    // Selling Type ID of the selling type involved in the transaction
    sellingTypeID: {
        type: String,
        required: true,
    },
    // Type of the selling type involved in the transaction
    sellingTypeCharge: {
        type: String,
        required: true,
    },
    // Amount for the selling type involved in the transaction
    sellingTypeAmount: {
        type: Number,
        required: true,
        min: 0,
    },
    // Created By (Cashier logged in user)
    createdBy: {
        type: String,
        required: true,
    },

}, {
    timestamps: true
});

// Pre-save hook to auto-generate the catergoryId
Payment_TransactionSchema.pre('save', async function (next) {
    if (this.isNew) {
        const lastPayment = await mongoose.model('Payment_Transaction').findOne().sort({ createdAt: -1 });
        const lastPaymentID = lastPayment ? parseInt(lastPayment.paymentID.split('-')[1]) : 0;
        this.paymentID = `PaymentID-${lastPaymentID + 1}`;
    }
    next();
});

export default mongoose.model('Payment_Transaction', Payment_TransactionSchema);
