import mongoose from "mongoose";
const { Schema } = mongoose;

const FinishedGood_TransactionSchema = new Schema({
    ftId: {
        type: String,
        required: true,
        unique: true,
    },
    companyId: {
        type: String,
        required: true,
    },
    shopId: {
        type: String,
        required: true,
    },
    finishedgoodId: {
        type: String,
        required: true,
    },
    usedProductDetails: [{
        productId: {
            type: String,
            required: true,
        },
        quantity: {
            type: Number,
            required: true,
            min: 0,
        },
        currentWAC: {
            type: Number,
            required: true,
            min: 0,
        },
    }],
    transactionDateTime: {
        type: Date,
        required: true,
    },
    transactionType: {
        type: String,
        required: true,
    },
    OrderNo: {
        type: String,
        required: true,
    },
    transactionCode: {
        type: String,
        required: true,
    },
    sellingType: {
        type: String,
        required: true,
    },
    sellingPrice: {
        type: Number,
        required: true,
        min: 0,
    },
    discountAmount: {
        type: Number,
        required: true,
        min: 0,
    },
    customerId: {
        type: String,
        required: false,
    },
    transactionInOut: {
        type: String,
        required: true,
        enum: ['In', 'Out'],
    },
    finishedgoodQty: {
        type: Number,
        required: false,
        min: 0,
    },
    transactionStatus: {
        type: String,
        required: true,
        enum: ["Pending", "Completed", "Cancelled", "Returned", "Partially Returned"],
    },
    createdBy: {
        type: String,
        required: true,
    },
}, {
    timestamps: true
});

// Pre-save hook to auto-generate the FTID
FinishedGood_TransactionSchema.pre('save', async function (next) {
    if (this.isNew) {
        const lastFinishGood = await mongoose.model('FinishedGood_Transaction').findOne().sort({ createdAt: -1 });
        const lastFinishGoodID = lastFinishGood ? parseInt(lastFinishGood.ftId.split('-')[1]) : 0;
        this.ftId = `FTID-${lastFinishGoodID + 1}`;
    }
    next();
});

export default mongoose.model("FinishedGood_Transaction", FinishedGood_TransactionSchema);


/*
import mongoose from "mongoose";
const { Schema } = mongoose;

const FinishedGood_TransactionSchema = new Schema({
    // Transaction ID per transaction generated by the system
    // FTID: Finished Good Transaction ID
    ftId: {
        type: String,
        required: true,
        unique: true,
    },
    // Company ID where the transaction is generated (Cashier logged in companyId)
    companyId: {
        type: String,
        required: true,
    },
    // Shop ID where the transaction is generated (Cashier logged in shopId)
    shopId: {
        type: String,
        required: true,
    },
    // Finished Good ID of the product involved in the Order, transaction
    finishedgoodId: {
        type: String,
        required: true,
    },
    // Product ID of the material involved in the transaction
    productId: {
        type: String,
        required: true,
    },
    // Transaction Date and Time
    transactionDateTime: {
        type: Date,
        required: true,
    },
    // Transaction Type (GRN, Sales, Return, etc.)
    transactionType: {
        type: String,
        required: true,
    },
    // Order Number of the transaction Daily resets back to 1 at the end of the day generated by the system
    // this is unique for according to the day and shopID.
    // this orderNo is same as the invoiceID in the payment transaction model.
    OrderNo: {
        type: String,
        required: true,
    },
    // Transaction Code generated by the system
    transactionCode: {
        type: String,
        required: true,
    },
    // Selling Type (Dine-in, Takeaway, Delivery, etc.)
    sellingType: {
        type: String,
        required: true,
    },
    // Selling Price of the product from the Selling Price Model for the Selling Type
    sellingPrice: {
        type: Number,
        required: true,
        min: 0,
    },
    // Discount Amount given for the transaction by the cashier + Selling Type additionDeduction value
    discountAmount: {
        type: Number,
        required: true,
        min: 0,
    },
    // Customer ID of the customer involved in the transaction
    customerId: {
        type: String,
        required: false,
    },
    // WAC of the product from the Inventory Stock Model
    WAC: {
        type: Number,
        required: true,
        min: 0,
    },
    // Transaction In or Out (In, Out)
    transactionInOut: {
        type: String,
        required: true,
        enum: ['In', 'Out'],
    },
    // Quantity of the product involved in the transaction
    quantity: {
        type: Number,
        required: true,
        min: 0,
    },
    // Finished Good Quantity of the product involved in the transaction
    finishedgoodQty: {
        type: Number,
        required: false,
        min: 0,
    },
    // Transaction Status (Pending, Completed, Cancelled)
    transactionStatus: {
        type: String,
        required: true,
        enum: ['Pending', 'Completed', 'Cancelled'],
    },
    // Created By (Cashier logged in user)
    createdBy: {
        type: String,
        required: true,
    },
}, {
    timestamps: true
});

// Pre-save hook to auto-generate the FTID
FinishedGood_TransactionSchema.pre('save', async function(next) {
    if (this.isNew) {
        const lastFinishGood = await mongoose.model('FinishedGood_Transaction').findOne().sort({ createdAt: -1 });
        const lastFinishGoodID = lastFinishGood ? parseInt(lastFinishGood.ftId.split('-')[1]) : 0;
        this.ftId = `FTID-${lastFinishGoodID + 1}`;
    }
    next();
});

export default mongoose.model("FinishedGood_Transaction", FinishedGood_TransactionSchema);
*/